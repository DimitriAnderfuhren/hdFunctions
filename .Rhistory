normV = function(expr, colsToUse = NULL){
# Adjust data to start from (approximately) 0
normV_expr = expr
q = apply(expr[,colsToUse], 2, function(x) quantile(x, 0.01, names = F))
normV_expr[,colsToUse] = sweep(normV_expr[,colsToUse], 2, q)
# Normalize to have everything from 0 to 1
per = apply(normV_expr[,colsToUse], 2, function(x) quantile(x, 0.99999, names = F))
normV_expr[,colsToUse] = t(t(normV_expr[,colsToUse]) / as.numeric(per))
# Check whether you adjusted the range approximately from 0 to 1
return(normV_expr)
}
# normalization01 for flowSom -> flowSOM flowSet
# matrixStats
normC = function(expr, colsToUse = NULL){
if(is.null(colsToUse)){
colsToUse = 1:ncol(expr)
}
Xm = as.matrix(expr[,colsToUse])
rng <- colQuantiles(Xm, probs = c(0.01, 0.99))
Xm <- t((t(Xm) - rng[, 1]) / (rng[, 2] - rng[, 1]))
Xm[Xm < 0] <- 0
Xm[Xm > 1] <- 1
expr[,colsToUse] = Xm
return(expr)
}
source_url("https://github.com/DimitriAnderfuhren/hdFunctions/blob/master/flowFunctions.R")
library(devtools)
source_url("https://github.com/DimitriAnderfuhren/hdFunctions/blob/master/flowFunctions.R")
source_url("https://raw.githubusercontent.com/DimitriAnderfuhren/hdFunctions/master/flowFunctions.R")
source("flowFunctions.R")
source("flowFunctions.R")
source_url("https://raw.githubusercontent.com/DimitriAnderfuhren/hdFunctions/master/flowFunctions.R")
source_url("https://github.com/DimitriAnderfuhren/hdFunctions/blob/master/flowFunctions.R")
source_url("https://raw.githubusercontent.com/DimitriAnderfuhren/hdFunctions/master/flowFunctions.R")
source_url("https://github.com/DimitriAnderfuhren/hdFunctions/blob/master/flowFunctions.R?raw=TRUE")
